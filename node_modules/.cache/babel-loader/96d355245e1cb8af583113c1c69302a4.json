{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const notificationSlice = createSlice({\n  name: 'notifications',\n  initialState: {\n    notificationModalState: false,\n    notificationCreationModalState: false,\n    allNotifications: [],\n    dayNotifications: [],\n    currentDay: '',\n    monthObject: \"\",\n    reminderToEdit: '',\n    isEditing: false\n  },\n  reducers: {\n    createNotification: (state, notificationObj) => {\n      state.notificationCreationModalState = false;\n      state.notificationModalState = false;\n      state.allNotifications.push(notificationObj.payload);\n      /*\n      let latitude = parseInt(notificationObj.payload.city.latitude, 10).toFixed(2);\n      let longitude = parseInt(notificationObj.payload.city.longitude, 10).toFixed(2);\n      let date = notificationObj.payload.date;\n       let headers = new Headers();\n       headers.append('Content-Type', 'application/json');\n        window.fetch(\"https://meta-weather.vercel.app/api/location/search/?lattlong=\" + latitude + \",\" + longitude,\n          {   method: 'GET',\n              headers: headers })\n      .then(res => {\n          let locationWoeid = res[0].woeid;\n           window.fetch(\"https://meta-weather.vercel.app/api/location/\" + locationWoeid)\n          .then (res => {\n              notificationObj.payload.weatherForecast = res.consolidated_weather[0].weather_state_abbr;\n               debugger;\n              state.allNotifications.push(notificationObj.payload);\n          });\n      });\n      */\n    },\n    deleteNotification: (state, notificationObj) => {\n      state.allNotifications = state.allNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let notificationDescription = notification.description;\n        let objectDate = new Date(notificationObj.payload.date);\n        let objectDescription = notificationObj.payload.description;\n        return notificationDate != objectDate && notificationDescription != objectDescription;\n      });\n      state.dayNotifications = state.dayNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let notificationDescription = notification.description;\n        let objectDate = new Date(notificationObj.payload.date);\n        let objectDescription = notificationObj.payload.description;\n        return notificationDate != objectDate && notificationDescription != objectDescription;\n      });\n      state.notificationModalState = false;\n    },\n    editNotification: (state, notificationObject) => {\n      state.reminderToEdit = notificationObject;\n      state.notificationModalState = false;\n      state.isEditing = true;\n      state.notificationCreationModalState = true;\n    },\n    changeModalState: (state, monthObject) => {\n      let allNotifications = state.allNotifications;\n      state.currentDay = monthObject.payload;\n      state.dayNotifications = allNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let currentDayDate = new Date(state.currentDay.dateObject);\n        return notificationDate.getFullYear() === currentDayDate.getFullYear() && notificationDate.getMonth() === currentDayDate.getMonth() && notificationDate.getDate() === currentDayDate.getDate();\n      });\n      state.monthObject = monthObject;\n      state.notificationModalState = !state.notificationModalState;\n    },\n    changeCreationModalState: (state, monthObject) => {\n      state.monthObject = monthObject;\n      state.notificationModalState = false;\n      state.notificationCreationModalState = !state.notificationCreationModalState;\n    },\n    finishEditing: (state, editingObject) => {\n      state.allNotifications.forEach((element, index) => {\n        debugger;\n      });\n      state.dayNotifications.forEach((element, index) => {});\n      state.isEditing = false;\n      state.reminderToEdit = '';\n    }\n  }\n});\nexport const {\n  createNotification,\n  deleteNotification,\n  finishEditing,\n  editNotification,\n  changeModalState,\n  changeCreationModalState,\n  clearEditingMode\n} = notificationSlice.actions;\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/reducers/notificationSlice.js"],"names":["createSlice","notificationSlice","name","initialState","notificationModalState","notificationCreationModalState","allNotifications","dayNotifications","currentDay","monthObject","reminderToEdit","isEditing","reducers","createNotification","state","notificationObj","push","payload","deleteNotification","filter","notification","notificationDate","Date","date","notificationDescription","description","objectDate","objectDescription","editNotification","notificationObject","changeModalState","currentDayDate","dateObject","getFullYear","getMonth","getDate","changeCreationModalState","finishEditing","editingObject","forEach","element","index","clearEditingMode","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const notificationSlice = createSlice({\n    name: 'notifications',\n    initialState: {\n        notificationModalState: false,\n        notificationCreationModalState: false,\n        allNotifications: [],\n        dayNotifications: [],\n        currentDay: '',\n        monthObject: \"\",\n        reminderToEdit: '',\n        isEditing: false\n    },\n    reducers: {\n        createNotification: (state, notificationObj) => {\n            state.notificationCreationModalState = false;\n            state.notificationModalState = false;\n\n            state.allNotifications.push(notificationObj.payload);\n            /*\n            let latitude = parseInt(notificationObj.payload.city.latitude, 10).toFixed(2);\n            let longitude = parseInt(notificationObj.payload.city.longitude, 10).toFixed(2);\n            let date = notificationObj.payload.date;\n\n            let headers = new Headers();\n\n            headers.append('Content-Type', 'application/json');\n\n\n            window.fetch(\"https://meta-weather.vercel.app/api/location/search/?lattlong=\" + latitude + \",\" + longitude,\n                {   method: 'GET',\n                    headers: headers })\n            .then(res => {\n                let locationWoeid = res[0].woeid;\n\n                window.fetch(\"https://meta-weather.vercel.app/api/location/\" + locationWoeid)\n                .then (res => {\n                    notificationObj.payload.weatherForecast = res.consolidated_weather[0].weather_state_abbr;\n\n                    debugger;\n                    state.allNotifications.push(notificationObj.payload);\n                });\n            });\n            */\n        },\n        deleteNotification: (state, notificationObj) => {\n            state.allNotifications = state.allNotifications.filter((notification) => {\n                let notificationDate = new Date(notification.date);\n                let notificationDescription = notification.description;\n                let objectDate = new Date(notificationObj.payload.date);\n                let objectDescription = notificationObj.payload.description;\n\n                return (notificationDate != objectDate &&\n                        notificationDescription != objectDescription);\n            });\n\n            state.dayNotifications = state.dayNotifications.filter((notification) => {\n                let notificationDate = new Date(notification.date);\n                let notificationDescription = notification.description;\n                let objectDate = new Date(notificationObj.payload.date);\n                let objectDescription = notificationObj.payload.description;\n\n                return (notificationDate != objectDate &&\n                        notificationDescription != objectDescription);\n            });\n\n            state.notificationModalState = false;\n        },\n        editNotification: (state, notificationObject) => {\n            state.reminderToEdit = notificationObject;\n\n            state.notificationModalState = false;\n            state.isEditing = true;\n            state.notificationCreationModalState = true;\n        },\n        changeModalState: (state, monthObject) => {\n            let allNotifications = state.allNotifications;\n\n            state.currentDay = monthObject.payload;\n\n            state.dayNotifications = allNotifications.filter( (notification) => {\n                let notificationDate = new Date(notification.date);\n                let currentDayDate = new Date(state.currentDay.dateObject);\n\n                return (notificationDate.getFullYear() === currentDayDate.getFullYear() &&\n                notificationDate.getMonth() === currentDayDate.getMonth() &&\n                notificationDate.getDate() === currentDayDate.getDate())\n            });\n\n            state.monthObject = monthObject;\n            state.notificationModalState = !state.notificationModalState;\n        },\n        changeCreationModalState: (state, monthObject) => {\n            state.monthObject = monthObject;\n            state.notificationModalState = false;\n            state.notificationCreationModalState = !state.notificationCreationModalState;\n        },\n        finishEditing: (state, editingObject) => {\n            state.allNotifications.forEach((element, index) => {\n                debugger;\n            });\n\n            state.dayNotifications.forEach((element, index) => {\n\n            });\n\n            state.isEditing = false;\n            state.reminderToEdit = '';\n        }\n    }\n});\n\nexport const { \n    createNotification, deleteNotification, finishEditing, editNotification, changeModalState, changeCreationModalState, clearEditingMode } = notificationSlice.actions\n\nexport default notificationSlice.reducer"]},"metadata":{},"sourceType":"module"}