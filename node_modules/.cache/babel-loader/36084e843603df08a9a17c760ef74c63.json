{"ast":null,"code":"var _jsxFileName = \"/home/elia/projects/ReactChallenge/src/components/CalendarNotifications.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeModalState, changeCreationModalState, deleteNotification } from '../reducers/notificationSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction generate(element) {\n  return [0, 1, 2].map(value => /*#__PURE__*/React.cloneElement(element, {\n    key: value\n  }));\n}\n\nexport default function CalendarNotifications() {\n  _s();\n\n  const open = useSelector(state => state.notifications.notificationModalState);\n  const monthObject = useSelector(state => state.notifications.monthDay);\n  const monthName = useSelector(state => state.date.monthName);\n  const year = useSelector(state => state.date.year);\n  const [secondary, setSecondary] = React.useState(false);\n  const dispatch = useDispatch();\n\n  const handleClickOpen = () => {\n    dispatch(changeModalState(\"\"));\n  };\n\n  const handleClose = () => {\n    dispatch(changeModalState(\"\"));\n  };\n\n  const handleOpenForm = () => {\n    dispatch(changeCreationModalState(\"\"));\n  };\n\n  const handleDeleteClick = value => {\n    dispatch(deleteNotification(value));\n  };\n\n  let dialogTitle = \"Notifications - \";\n\n  if (monthObject.payload) {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Open form dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"Notifications - \" + monthObject.payload.monthDay + \" of \" + monthName + \" of \" + year, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          sx: {\n            width: '100%',\n            bgcolor: 'background.paper'\n          },\n          children: generate( /*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            onClick: handleOpenForm,\n            secondaryAction: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: handleDeleteClick,\n              edge: \"end\",\n              \"aria-label\": \"delete\",\n              children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 23\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: \"Single-line item\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleOpenForm,\n          children: \"Create Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n}\n\n_s(CalendarNotifications, \"jvpIA5GmMOJMvrHkylrVvrvYxr8=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = CalendarNotifications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarNotifications\");","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/components/CalendarNotifications.jsx"],"names":["React","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","Avatar","List","ListItem","ListItemAvatar","ListItemIcon","ListItemText","IconButton","EditIcon","DeleteIcon","useSelector","useDispatch","changeModalState","changeCreationModalState","deleteNotification","generate","element","map","value","cloneElement","key","CalendarNotifications","open","state","notifications","notificationModalState","monthObject","monthDay","monthName","date","year","secondary","setSecondary","useState","dispatch","handleClickOpen","handleClose","handleOpenForm","handleDeleteClick","dialogTitle","payload","width","bgcolor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\n\n\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeModalState, changeCreationModalState, deleteNotification } from '../reducers/notificationSlice';\n\n\nfunction generate(element: React.ReactElement) {\n    return [0, 1, 2].map((value) =>\n        React.cloneElement(element, {\n            key: value\n        })\n    );\n}\n\nexport default function CalendarNotifications() {\n    const open = useSelector((state) => state.notifications.notificationModalState);\n    const monthObject = useSelector((state) => state.notifications.monthDay);\n    const monthName = useSelector((state) => state.date.monthName);\n    const year = useSelector((state) => state.date.year);\n    const [secondary, setSecondary] = React.useState(false);\n\n    const dispatch = useDispatch();\n\n    const handleClickOpen = () => {\n        dispatch(changeModalState(\"\"));\n    };\n\n    const handleClose = () => {\n        dispatch(changeModalState(\"\"));\n    };\n\n    const handleOpenForm = () => {\n        dispatch(changeCreationModalState(\"\"));\n    };\n\n    const handleDeleteClick = (value) => {\n        dispatch(deleteNotification(value));\n    };\n\n    let dialogTitle = \"Notifications - \";\n\n    if (monthObject.payload) {\n      \n    }\n\n    return (\n      <div>\n          <Button variant=\"outlined\" onClick={handleClickOpen}>\n          Open form dialog\n          </Button>\n          <Dialog\n            open={open}\n            onClose={handleClose}>\n          <DialogTitle>{\"Notifications - \" + monthObject.payload.monthDay + \" of \" + monthName + \" of \" + year} </DialogTitle>\n          <DialogContent>\n              <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n                {generate(\n\n                  <ListItem\n                    button\n                    onClick={handleOpenForm}\n                    secondaryAction={\n                      <IconButton\n                        onClick={handleDeleteClick}\n                        edge=\"end\" aria-label=\"delete\">\n                        <DeleteIcon />\n                      </IconButton>\n                    }>\n                    <ListItemText\n                      primary=\"Single-line item\"\n                    />\n                  </ListItem>\n                )}\n              </List>\n          </DialogContent>\n          <DialogActions>\n              <Button onClick={handleClose}>Cancel</Button>\n              <Button onClick={handleOpenForm}>Create Reminder</Button>\n          </DialogActions>\n          </Dialog>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}