{"ast":null,"code":"var _jsxFileName = \"/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { Country, State, City } from 'country-state-city';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createNotification, changeCreationModalState } from '../reducers/notificationSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CalendarNotificationForm() {\n  _s();\n\n  const dispatch = useDispatch();\n  const open = useSelector(state => state.notifications.notificationCreationModalState);\n  const [country, selectCountry] = React.useState('');\n  const [date, setDate] = React.useState(new Date());\n  const [cities, setCities] = React.useState([]);\n  const [description, setDescription] = React.useState('');\n  const [city, setCity] = React.useState('');\n  const countries = Country.getAllCountries();\n\n  const handleDateChange = newValue => {\n    setDate(newValue);\n  };\n\n  const handleCountryChange = val => {\n    selectCountry(val);\n    let country = countries.filter(function (country) {\n      return country.name == val;\n    });\n    let cities = City.getCitiesOfCountry(country[0].isoCode);\n    setCities(cities);\n  };\n\n  const handleClickOpen = () => {\n    dispatch(changeCreationModalState(\"\"));\n  };\n\n  const handleClose = () => {\n    dispatch(changeCreationModalState(\"\"));\n  };\n\n  const handleTextChange = value => {\n    debugger;\n    setDescription(value);\n  };\n\n  const createReminder = () => {\n    let notificationObj = {\n      'date': date,\n      'city': city,\n      'description': description ? description : \"\"\n    };\n    dispatch(createNotification(notificationObj));\n    debugger;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Open form dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"New reminder\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            inputProps: {\n              maxLength: 30\n            },\n            onChange: handleTextChange,\n            id: \"standard-basic\",\n            label: \"Reminder\",\n            variant: \"standard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(DateTimePicker, {\n              label: \"Time\",\n              value: date,\n              onChange: handleDateChange,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 54\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CountryDropdown, {\n            value: country,\n            onChange: handleCountryChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            onChange: (event, value) => setCity(value),\n            disablePortal: true,\n            id: \"citySelection\",\n            options: cities,\n            getOptionLabel: option => option.name,\n            sx: {\n              width: 300\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              label: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: createReminder,\n          children: \"Create Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CalendarNotificationForm, \"s3S0uI29rP45WW6cTD5OiNX1gvU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CalendarNotificationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarNotificationForm\");","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx"],"names":["React","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextField","AdapterDateFns","LocalizationProvider","CountryDropdown","RegionDropdown","CountryRegionData","Country","State","City","DateTimePicker","Autocomplete","useSelector","useDispatch","createNotification","changeCreationModalState","CalendarNotificationForm","dispatch","open","state","notifications","notificationCreationModalState","country","selectCountry","useState","date","setDate","Date","cities","setCities","description","setDescription","city","setCity","countries","getAllCountries","handleDateChange","newValue","handleCountryChange","val","filter","name","getCitiesOfCountry","isoCode","handleClickOpen","handleClose","handleTextChange","value","createReminder","notificationObj","display","flexDirection","gap","maxLength","params","event","option","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { Country, State, City }  from 'country-state-city';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createNotification, changeCreationModalState} from '../reducers/notificationSlice';\n\nexport default function CalendarNotificationForm() {\n    const dispatch = useDispatch();\n    const open = useSelector((state) => state.notifications.notificationCreationModalState);\n    const [country, selectCountry] =  React.useState('');\n    const [date, setDate] = React.useState(new Date());\n    const [cities, setCities] = React.useState([]);\n    const [description, setDescription] = React.useState('');\n    const [city, setCity] = React.useState('');\n    const countries = Country.getAllCountries();\n\n    const handleDateChange = (newValue) => {\n        setDate(newValue);\n    };\n\n    const handleCountryChange = (val) => {\n        selectCountry(val);\n        let country = countries.filter(function(country) {\n            return country.name == val;\n        });\n        let cities = City.getCitiesOfCountry(country[0].isoCode);\n        setCities(cities);\n    };\n\n    const handleClickOpen = () => {\n        dispatch(changeCreationModalState(\"\"));\n    };\n\n    const handleClose = () => {\n        dispatch(changeCreationModalState(\"\"));\n    };\n\n    const handleTextChange = (value) => {\n        debugger;\n        setDescription(value);\n    };\n\n    const createReminder = () => {\n        let notificationObj = {\n            'date': date,\n            'city': city,\n            'description': description ? description : \"\"\n        };\n\n        dispatch(createNotification(notificationObj));\n        debugger;\n    }\n\n    return (\n        <div>\n            <Button variant=\"outlined\" onClick={handleClickOpen}>\n            Open form dialog\n            </Button>\n            <Dialog\n            open={open}\n            onClose={handleClose}>\n            <DialogTitle>{\"New reminder\"} </DialogTitle>\n            <DialogContent>\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\" }}>\n                    <TextField\n                        inputProps={{ maxLength: 30 }}\n                        onChange={handleTextChange}\n                        id=\"standard-basic\"\n                        label=\"Reminder\"\n                        variant=\"standard\" />\n\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <DateTimePicker\n                            label=\"Time\"\n                            value={date}\n                            onChange={handleDateChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                    </LocalizationProvider>\n                    <CountryDropdown\n                        value={country}\n                        onChange={handleCountryChange} />\n                    <Autocomplete\n                        onChange={(event, value) => setCity(value)}\n                        disablePortal\n                        id=\"citySelection\"\n                        options={cities}\n                        getOptionLabel={(option) => option.name}\n                        sx={{ width: 300 }}\n                        renderInput={(params) => <TextField {...params} label=\"City\" />}\n                    />\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>Cancel</Button>\n                <Button onClick={createReminder}>Create Reminder</Button>\n            </DialogActions>\n            </Dialog>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}