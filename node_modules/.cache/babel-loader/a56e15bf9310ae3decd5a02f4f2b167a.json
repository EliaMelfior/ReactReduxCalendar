{"ast":null,"code":"var _jsxFileName = \"/home/elia/projects/ReactChallenge/src/components/CalendarNotifications.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeModalState } from '../reducers/notificationSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction generate(element) {\n  return [0, 1, 2].map(value => /*#__PURE__*/React.cloneElement(element, {\n    key: value\n  }));\n}\n\nexport default function CalendarNotifications() {\n  _s();\n\n  const open = useSelector(state => state.notifications.notificationModalState);\n  const monthObject = useSelector(state => state.notifications.monthDay);\n  const monthName = useSelector(state => state.date.monthName);\n  const year = useSelector(state => state.date.year);\n  const [secondary, setSecondary] = React.useState(false);\n  const dispatch = useDispatch();\n\n  const handleClickOpen = () => {\n    dispatch(changeModalState(\"\"));\n  };\n\n  const handleClose = () => {\n    dispatch(changeModalState(\"\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Open form dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"Notifications - \" + monthObject.payload.monthDay + \" of \" + monthName + \" of \" + year, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          dense: true,\n          children: generate( /*#__PURE__*/_jsxDEV(ListItem, {\n            secondaryAction: /*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"end\",\n              \"aria-label\": \"delete\",\n              children: [/*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: \"Single-line item\",\n              secondary: secondary ? 'Secondary text' : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Create Notification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CalendarNotifications, \"jvpIA5GmMOJMvrHkylrVvrvYxr8=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = CalendarNotifications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarNotifications\");","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/components/CalendarNotifications.jsx"],"names":["React","Button","Dialog","DialogActions","DialogContent","DialogTitle","List","ListItem","ListItemAvatar","ListItemIcon","ListItemText","IconButton","EditIcon","DeleteIcon","useSelector","useDispatch","changeModalState","generate","element","map","value","cloneElement","key","CalendarNotifications","open","state","notifications","notificationModalState","monthObject","monthDay","monthName","date","year","secondary","setSecondary","useState","dispatch","handleClickOpen","handleClose","payload"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeModalState } from '../reducers/notificationSlice';\n\n\nfunction generate(element: React.ReactElement) {\n    return [0, 1, 2].map((value) =>\n        React.cloneElement(element, {\n            key: value\n        })\n    );\n}\n\nexport default function CalendarNotifications() {\n    const open = useSelector((state) => state.notifications.notificationModalState);\n    const monthObject = useSelector((state) => state.notifications.monthDay);\n    const monthName = useSelector((state) => state.date.monthName);\n    const year = useSelector((state) => state.date.year);\n    const [secondary, setSecondary] = React.useState(false);\n\n    const dispatch = useDispatch();\n\n    const handleClickOpen = () => {\n        dispatch(changeModalState(\"\"));\n    };\n\n    const handleClose = () => {\n        dispatch(changeModalState(\"\"));\n    };\n\n    return (\n    <div>\n        <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Open form dialog\n        </Button>\n        <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>{\"Notifications - \" + monthObject.payload.monthDay + \" of \" + monthName + \" of \" + year} </DialogTitle>\n        <DialogContent>\n            <List dense={true}>\n              {generate(\n                <ListItem\n                  secondaryAction={\n                    <IconButton edge=\"end\" aria-label=\"delete\">\n                      <DeleteIcon />\n                      <EditIcon />\n                    </IconButton>\n                  }\n                >\n                  <ListItemText\n                    primary=\"Single-line item\"\n                    secondary={secondary ? 'Secondary text' : null}\n                  />\n                </ListItem>\n              )}\n            </List>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button onClick={handleClose}>Create Notification</Button>\n        </DialogActions>\n        </Dialog>\n    </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}