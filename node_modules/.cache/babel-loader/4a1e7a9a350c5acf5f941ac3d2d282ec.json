{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const notificationSlice = createSlice({\n  name: 'notifications',\n  initialState: {\n    notificationModalState: false,\n    notificationCreationModalState: false,\n    allNotifications: [],\n    dayNotifications: [],\n    currentDay: '',\n    monthObject: '',\n    reminderToEdit: ''\n  },\n  reducers: {\n    createNotification: (state, notificationObj) => {\n      state.notificationCreationModalState = false;\n      state.notificationModalState = false;\n      /*\n      let latitude = parseInt(notificationObj.payload.city.latitude, 10).toFixed(2);\n      let longitude = parseInt(notificationObj.payload.city.longitude, 10).toFixed(2);\n      let date = notificationObj.payload.date;\n       let headers = new Headers();\n       headers.append('Content-Type', 'application/json');\n        window.fetch(\"https://meta-weather.vercel.app/api/location/search/?lattlong=\" + latitude + \",\" + longitude,\n          {   method: 'GET',\n              headers: headers })\n      .then(res => {\n          let locationWoeid = res[0].woeid;\n           window.fetch(\"https://meta-weather.vercel.app/api/location/\" + locationWoeid)\n          .then (res => {\n              notificationObj.payload.weatherForecast = res.consolidated_weather[0].weather_state_abbr;\n               debugger;\n              state.allNotifications.push(notificationObj.payload);\n          });\n      });\n      */\n    },\n    deleteNotification: (state, notificationObj) => {\n      state.allNotifications = state.allNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let notificationDescription = notification.description;\n        let objectDate = new Date(notificationObj.payload.date);\n        let objectDescription = notificationObj.payload.description;\n        return notificationDate != objectDate && notificationDescription != objectDescription;\n      });\n      state.dayNotifications = state.dayNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let notificationDescription = notification.description;\n        let objectDate = new Date(notificationObj.payload.date);\n        let objectDescription = notificationObj.payload.description;\n        return notificationDate != objectDate && notificationDescription != objectDescription;\n      });\n      state.notificationModalState = false;\n    },\n    editNotification: (state, notificationObject) => {\n      state.reminderToEdit = notificationObject;\n      state.notificationModalState = false;\n      state.notificationCreationModalState = true;\n    },\n    changeModalState: (state, monthObject) => {\n      let allNotifications = state.allNotifications;\n      state.currentDay = monthObject.payload;\n      state.dayNotifications = allNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let currentDayDate = new Date(state.currentDay.dateObject);\n        return notificationDate.getFullYear() === currentDayDate.getFullYear() && notificationDate.getMonth() === currentDayDate.getMonth() && notificationDate.getDate() === currentDayDate.getDate();\n      });\n      state.monthObject = monthObject;\n      state.notificationModalState = !state.notificationModalState;\n    },\n    changeCreationModalState: (state, monthObject) => {\n      state.monthObject = monthObject;\n      state.notificationModalState = false;\n      state.notificationCreationModalState = !state.notificationCreationModalState;\n    }\n  }\n});\nexport const {\n  createNotification,\n  deleteNotification,\n  editNotification,\n  changeModalState,\n  changeCreationModalState\n} = notificationSlice.actions;\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/reducers/notificationSlice.js"],"names":["createSlice","notificationSlice","name","initialState","notificationModalState","notificationCreationModalState","allNotifications","dayNotifications","currentDay","monthObject","reminderToEdit","reducers","createNotification","state","notificationObj","deleteNotification","filter","notification","notificationDate","Date","date","notificationDescription","description","objectDate","payload","objectDescription","editNotification","notificationObject","changeModalState","currentDayDate","dateObject","getFullYear","getMonth","getDate","changeCreationModalState","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const notificationSlice = createSlice({\n    name: 'notifications',\n    initialState: {\n        notificationModalState: false,\n        notificationCreationModalState: false,\n        allNotifications: [],\n        dayNotifications: [],\n        currentDay: '',\n        monthObject: '',\n        reminderToEdit: ''\n    },\n    reducers: {\n        createNotification: (state, notificationObj) => {\n            state.notificationCreationModalState = false;\n            state.notificationModalState = false;\n            /*\n            let latitude = parseInt(notificationObj.payload.city.latitude, 10).toFixed(2);\n            let longitude = parseInt(notificationObj.payload.city.longitude, 10).toFixed(2);\n            let date = notificationObj.payload.date;\n\n            let headers = new Headers();\n\n            headers.append('Content-Type', 'application/json');\n\n\n            window.fetch(\"https://meta-weather.vercel.app/api/location/search/?lattlong=\" + latitude + \",\" + longitude,\n                {   method: 'GET',\n                    headers: headers })\n            .then(res => {\n                let locationWoeid = res[0].woeid;\n\n                window.fetch(\"https://meta-weather.vercel.app/api/location/\" + locationWoeid)\n                .then (res => {\n                    notificationObj.payload.weatherForecast = res.consolidated_weather[0].weather_state_abbr;\n\n                    debugger;\n                    state.allNotifications.push(notificationObj.payload);\n                });\n            });\n            */\n        },\n        deleteNotification: (state, notificationObj) => {\n            state.allNotifications = state.allNotifications.filter((notification) => {\n                let notificationDate = new Date(notification.date);\n                let notificationDescription = notification.description;\n                let objectDate = new Date(notificationObj.payload.date);\n                let objectDescription = notificationObj.payload.description;\n\n                return (notificationDate != objectDate &&\n                        notificationDescription != objectDescription);\n            });\n\n            state.dayNotifications = state.dayNotifications.filter((notification) => {\n                let notificationDate = new Date(notification.date);\n                let notificationDescription = notification.description;\n                let objectDate = new Date(notificationObj.payload.date);\n                let objectDescription = notificationObj.payload.description;\n\n                return (notificationDate != objectDate &&\n                        notificationDescription != objectDescription);\n            });\n\n            state.notificationModalState = false;\n        },\n        editNotification: (state, notificationObject) => {\n            state.reminderToEdit = notificationObject;\n\n            state.notificationModalState = false;\n            state.notificationCreationModalState = true;\n        },\n        changeModalState: (state, monthObject) => {\n            let allNotifications = state.allNotifications;\n\n            state.currentDay = monthObject.payload;\n\n            state.dayNotifications = allNotifications.filter( (notification) => {\n                let notificationDate = new Date(notification.date);\n                let currentDayDate = new Date(state.currentDay.dateObject);\n\n                return (notificationDate.getFullYear() === currentDayDate.getFullYear() &&\n                notificationDate.getMonth() === currentDayDate.getMonth() &&\n                notificationDate.getDate() === currentDayDate.getDate())\n            });\n\n            state.monthObject = monthObject;\n            state.notificationModalState = !state.notificationModalState;\n        },\n        changeCreationModalState: (state, monthObject) => {\n            state.monthObject = monthObject;\n            state.notificationModalState = false;\n            state.notificationCreationModalState = !state.notificationCreationModalState;\n        }\n    }\n});\n\nexport const { createNotification, deleteNotification, editNotification, changeModalState, changeCreationModalState } = notificationSlice.actions\n\nexport default notificationSlice.reducer"]},"metadata":{},"sourceType":"module"}