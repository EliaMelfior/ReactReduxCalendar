{"ast":null,"code":"var _jsxFileName = \"/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { Country, State, City } from 'country-state-city';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createNotification, changeCreationModalState, clearEditingMode } from '../reducers/notificationSlice';\nimport { DescriptionOutlined } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CalendarNotificationForm() {\n  _s();\n\n  const dispatch = useDispatch();\n  const monthObject = useSelector(state => state.notifications.monthObject);\n  const open = useSelector(state => state.notifications.notificationCreationModalState);\n  const isEditing = useSelector(state => state.notifications.isEditing);\n  const reminderToEdit = useSelector(state => state.notifications.reminderToEdit);\n  const [country, selectCountry] = React.useState('');\n  const date = React.useRef(new Date());\n  const [cities, setCities] = React.useState([]);\n  const description = React.useRef('');\n  const city = React.useRef('');\n  const countries = Country.getAllCountries();\n\n  if (isEditing) {\n    console.log('test');\n    date.current = reminderToEdit.payload.date;\n    city.current = reminderToEdit.payload.city;\n    description.current = reminderToEdit.payload.description;\n  }\n\n  const handleDateChange = newValue => {\n    date.current = newValue;\n  };\n\n  const handleCountryChange = val => {\n    selectCountry(val);\n    let country = countries.filter(function (country) {\n      return country.name == val;\n    });\n    let cities = City.getCitiesOfCountry(country[0].isoCode);\n    setCities(cities);\n  };\n\n  const handleClickOpen = () => {\n    dispatch(changeCreationModalState(\"\"));\n  };\n\n  const handleClose = () => {\n    dispatch(changeCreationModalState(\"\"));\n  };\n\n  const handleTextChange = event => {\n    description.current = event.currentTarget.value;\n  };\n\n  const createReminder = () => {\n    let notificationObj = {\n      'date': date.current,\n      'city': city.current,\n      'description': description.current ? description.current : \"\"\n    };\n    dispatch(createNotification(notificationObj));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Open form dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"New reminder\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            sx: {\n              minWidth: \"300px\"\n            },\n            inputProps: {\n              maxLength: 30\n            },\n            value: description.current,\n            onChange: handleTextChange,\n            id: \"standard-basic\",\n            label: \"Reminder\",\n            variant: \"standard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(DateTimePicker, {\n              sx: {\n                minWidth: \"300px\"\n              },\n              label: \"Time\",\n              value: date.current,\n              onChange: handleDateChange,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 54\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CountryDropdown, {\n            sx: {\n              minWidth: \"300px\"\n            },\n            value: country,\n            onChange: handleCountryChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            sx: {\n              minWidth: \"300px\"\n            },\n            onChange: (event, value) => city.current = value,\n            disablePortal: true,\n            id: \"citySelection\",\n            options: cities,\n            getOptionLabel: option => option.name,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              label: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: createReminder,\n          children: \"Create Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CalendarNotificationForm, \"eLJZltQIYBNr/2M93JlPghNQYMk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = CalendarNotificationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarNotificationForm\");","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx"],"names":["React","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextField","AdapterDateFns","LocalizationProvider","CountryDropdown","RegionDropdown","CountryRegionData","Country","State","City","DateTimePicker","Autocomplete","useSelector","useDispatch","createNotification","changeCreationModalState","clearEditingMode","DescriptionOutlined","CalendarNotificationForm","dispatch","monthObject","state","notifications","open","notificationCreationModalState","isEditing","reminderToEdit","country","selectCountry","useState","date","useRef","Date","cities","setCities","description","city","countries","getAllCountries","console","log","current","payload","handleDateChange","newValue","handleCountryChange","val","filter","name","getCitiesOfCountry","isoCode","handleClickOpen","handleClose","handleTextChange","event","currentTarget","value","createReminder","notificationObj","display","flexDirection","gap","minWidth","maxLength","params","option"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { Country, State, City }  from 'country-state-city';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createNotification, changeCreationModalState, clearEditingMode } from '../reducers/notificationSlice';\nimport { DescriptionOutlined } from '@mui/icons-material';\n\nexport default function CalendarNotificationForm() {\n    const dispatch = useDispatch();\n    const monthObject = useSelector((state) => state.notifications.monthObject);\n    const open = useSelector((state) => state.notifications.notificationCreationModalState);\n    const isEditing = useSelector((state) => state.notifications.isEditing);\n    const reminderToEdit = useSelector((state) => state.notifications.reminderToEdit);\n    const [country, selectCountry] =  React.useState('');\n    const date = React.useRef(new Date());\n    const [cities, setCities] = React.useState([]);\n    const description = React.useRef('');\n    const city = React.useRef('');\n    const countries = Country.getAllCountries();\n\n    if (isEditing) {\n        console.log('test');\n        date.current = (reminderToEdit.payload.date);\n        city.current = (reminderToEdit.payload.city);\n        description.current = (reminderToEdit.payload.description);\n    }\n\n    const handleDateChange = (newValue) => {\n        date.current = (newValue);\n    };\n\n    const handleCountryChange = (val) => {\n        selectCountry(val);\n        let country = countries.filter(function(country) {\n            return country.name == val;\n        });\n        let cities = City.getCitiesOfCountry(country[0].isoCode);\n        setCities(cities);\n    };\n\n    const handleClickOpen = () => {\n        dispatch(changeCreationModalState(\"\"));\n    };\n\n    const handleClose = () => {\n        dispatch(changeCreationModalState(\"\"));\n    };\n\n    const handleTextChange = (event) => {\n        description.current = (event.currentTarget.value);\n    };\n\n    const createReminder = () => {\n        let notificationObj = {\n            'date': date.current,\n            'city': city.current,\n            'description': description.current ? description.current : \"\"\n        };\n\n        dispatch(createNotification(notificationObj));\n    }\n\n    return (\n        <div>\n            <Button variant=\"outlined\" onClick={handleClickOpen}>\n            Open form dialog\n            </Button>\n            <Dialog\n            open={open}\n            onClose={handleClose}>\n            <DialogTitle>{\"New reminder\"} </DialogTitle>\n            <DialogContent>\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\" }}>\n                    <TextField\n                        sx={{ minWidth: \"300px\" }}\n                        inputProps={{ maxLength: 30 }}\n                        value={description.current}\n                        onChange={handleTextChange}\n                        id=\"standard-basic\"\n                        label=\"Reminder\"\n                        variant=\"standard\" />\n\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <DateTimePicker\n                            sx={{ minWidth: \"300px\" }}\n                            label=\"Time\"\n                            value={date.current}\n                            onChange={handleDateChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                    </LocalizationProvider>\n                    <CountryDropdown\n                        sx={{ minWidth: \"300px\" }}\n                        value={country}\n                        onChange={handleCountryChange} />\n                    <Autocomplete\n                        sx={{ minWidth: \"300px\" }}\n                        onChange={(event, value) => city.current = (value)}\n                        disablePortal\n                        id=\"citySelection\"\n                        options={cities}\n                        getOptionLabel={(option) => option.name}\n                        renderInput={(params) => <TextField {...params} label=\"City\" />}\n                    />\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>Cancel</Button>\n                <Button onClick={createReminder}>Create Reminder</Button>\n            </DialogActions>\n            </Dialog>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}