{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const notificationSlice = createSlice({\n  name: 'notifications',\n  initialState: {\n    notificationModalState: false,\n    notificationCreationModalState: false,\n    allNotifications: [],\n    dayNotifications: [],\n    currentDay: '',\n    monthObject: ''\n  },\n  reducers: {\n    createNotification: (state, notificationObj) => {\n      state.notificationCreationModalState = false;\n      state.notificationModalState = false;\n      let latitude = parseInt(notificationObj.payload.city.latitude, 10).toFixed(2);\n      let longitude = parseInt(notificationObj.payload.city.longitude, 10).toFixed(2);\n      let date = notificationObj.payload.date;\n      let headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      https: //meta-weather.now.sh/api/location/search/?query=san\n      window.fetch(\"https://meta-weather.now.sh/api/location/search/?lattlong=\" + latitude + \",\" + longitude, {\n        mode: 'no-cors',\n        method: 'GET',\n        headers: headers\n      }).then(res => {\n        let locationWoeid = res[0].woeid;\n        window.fetch(\"https://meta-weather.now.sh/api/location/\" + locationWoeid).then(res => {\n          notificationObj.payload.weatherForecast = res.consolidated_weather[0].weather_state_abbr;\n          debugger;\n          state.allNotifications.push(notificationObj.payload);\n        });\n      });\n    },\n    deleteNotification: (state, notificationObj) => {\n      state.allNotifications = state.allNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let notificationDescription = notification.description;\n        let objectDate = new Date(notificationObj.payload.date);\n        let objectDescription = notificationObj.payload.description;\n        return notificationDate != objectDate && notificationDescription != objectDescription;\n      });\n      state.dayNotifications = state.dayNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let notificationDescription = notification.description;\n        let objectDate = new Date(notificationObj.payload.date);\n        let objectDescription = notificationObj.payload.description;\n        return notificationDate != objectDate && notificationDescription != objectDescription;\n      });\n      state.notificationModalState = false;\n    },\n    editNotification: (state, notificationId) => {},\n    changeModalState: (state, monthObject) => {\n      let allNotifications = state.allNotifications;\n      state.currentDay = monthObject.payload;\n      state.dayNotifications = allNotifications.filter(notification => {\n        let notificationDate = new Date(notification.date);\n        let currentDayDate = new Date(state.currentDay.dateObject);\n        return notificationDate.getFullYear() === currentDayDate.getFullYear() && notificationDate.getMonth() === currentDayDate.getMonth() && notificationDate.getDate() === currentDayDate.getDate();\n      });\n      state.monthObject = monthObject;\n      state.notificationModalState = !state.notificationModalState;\n    },\n    changeCreationModalState: (state, monthObject) => {\n      state.monthObject = monthObject;\n      state.notificationModalState = false;\n      state.notificationCreationModalState = !state.notificationCreationModalState;\n    }\n  }\n});\nexport const {\n  createNotification,\n  deleteNotification,\n  editNotification,\n  changeModalState,\n  changeCreationModalState\n} = notificationSlice.actions;\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/reducers/notificationSlice.js"],"names":["createSlice","notificationSlice","name","initialState","notificationModalState","notificationCreationModalState","allNotifications","dayNotifications","currentDay","monthObject","reducers","createNotification","state","notificationObj","latitude","parseInt","payload","city","toFixed","longitude","date","headers","Headers","append","https","window","fetch","mode","method","then","res","locationWoeid","woeid","weatherForecast","consolidated_weather","weather_state_abbr","push","deleteNotification","filter","notification","notificationDate","Date","notificationDescription","description","objectDate","objectDescription","editNotification","notificationId","changeModalState","currentDayDate","dateObject","getFullYear","getMonth","getDate","changeCreationModalState","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const notificationSlice = createSlice({\n    name: 'notifications',\n    initialState: {\n        notificationModalState: false,\n        notificationCreationModalState: false,\n        allNotifications: [],\n        dayNotifications: [],\n        currentDay: '',\n        monthObject: ''\n    },\n    reducers: {\n        createNotification: (state, notificationObj) => {\n            state.notificationCreationModalState = false;\n            state.notificationModalState = false;\n            let latitude = parseInt(notificationObj.payload.city.latitude, 10).toFixed(2);\n            let longitude = parseInt(notificationObj.payload.city.longitude, 10).toFixed(2);\n            let date = notificationObj.payload.date;\n\n            let headers = new Headers();\n\n            headers.append('Content-Type', 'application/json');\n            https://meta-weather.now.sh/api/location/search/?query=san\n            window.fetch(\"https://meta-weather.now.sh/api/location/search/?lattlong=\" + latitude + \",\" + longitude,\n                {   mode: 'no-cors',\n                    method: 'GET',\n                    headers: headers })\n            .then(res => {\n                let locationWoeid = res[0].woeid;\n\n                window.fetch(\"https://meta-weather.now.sh/api/location/\" + locationWoeid)\n                .then (res => {\n                    notificationObj.payload.weatherForecast = res.consolidated_weather[0].weather_state_abbr;\n\n                    debugger;\n                    state.allNotifications.push(notificationObj.payload);\n                });\n            });\n        },\n        deleteNotification: (state, notificationObj) => {\n            state.allNotifications = state.allNotifications.filter((notification) => {\n                let notificationDate = new Date(notification.date);\n                let notificationDescription = notification.description;\n                let objectDate = new Date(notificationObj.payload.date);\n                let objectDescription = notificationObj.payload.description;\n\n                return (notificationDate != objectDate &&\n                        notificationDescription != objectDescription);\n            });\n\n            state.dayNotifications = state.dayNotifications.filter((notification) => {\n                let notificationDate = new Date(notification.date);\n                let notificationDescription = notification.description;\n                let objectDate = new Date(notificationObj.payload.date);\n                let objectDescription = notificationObj.payload.description;\n\n                return (notificationDate != objectDate &&\n                        notificationDescription != objectDescription);\n            });\n\n            state.notificationModalState = false;\n        },\n        editNotification: (state, notificationId) => {\n\n        },\n        changeModalState: (state, monthObject) => {\n            let allNotifications = state.allNotifications;\n\n            state.currentDay = monthObject.payload;\n\n            state.dayNotifications = allNotifications.filter( (notification) => {\n                let notificationDate = new Date(notification.date);\n                let currentDayDate = new Date(state.currentDay.dateObject);\n\n                return (notificationDate.getFullYear() === currentDayDate.getFullYear() &&\n                notificationDate.getMonth() === currentDayDate.getMonth() &&\n                notificationDate.getDate() === currentDayDate.getDate())\n            });\n\n            state.monthObject = monthObject;\n            state.notificationModalState = !state.notificationModalState;\n        },\n        changeCreationModalState: (state, monthObject) => {\n            state.monthObject = monthObject;\n            state.notificationModalState = false;\n            state.notificationCreationModalState = !state.notificationCreationModalState;\n        }\n    }\n});\n\nexport const { createNotification, deleteNotification, editNotification, changeModalState, changeCreationModalState } = notificationSlice.actions\n\nexport default notificationSlice.reducer"]},"metadata":{},"sourceType":"module"}