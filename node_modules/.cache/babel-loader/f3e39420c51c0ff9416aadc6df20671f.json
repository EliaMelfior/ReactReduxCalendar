{"ast":null,"code":"var _jsxFileName = \"/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { Country, State, City } from 'country-state-city';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeModalState, changeCreationModalState } from '../reducers/notificationSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CalendarNotificationForm() {\n  _s();\n\n  const open = useSelector(state => state.notifications.notificationCreationModalState);\n  const [country, selectCountry] = React.useState('');\n  const [region, selectRegion] = React.useState('');\n  const [value, setValue] = React.useState(new Date());\n  const [cities, setCities] = React.useState('');\n  const [city, setCity] = React.useState('');\n\n  const handleDateChange = newValue => {\n    setValue(newValue);\n  };\n\n  const handleCountryChange = val => {\n    selectCountry(val);\n    let x = City.getCitiesOfCountry(val);\n    let y = Country.getAllCountries();\n    debugger;\n  };\n\n  const dispatch = useDispatch();\n\n  const handleClickOpen = () => {\n    dispatch(changeCreationModalState(\"\"));\n  };\n\n  const handleClose = () => {\n    dispatch(changeCreationModalState(\"\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Open form dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"New reminder\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            inputProps: {\n              maxLength: 30\n            },\n            id: \"standard-basic\",\n            label: \"Reminder\",\n            variant: \"standard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(DateTimePicker, {\n              label: \"Time\",\n              value: value,\n              onChange: handleDateChange,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 54\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CountryDropdown, {\n            value: country,\n            onChange: handleCountryChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            disablePortal: true,\n            id: \"citySelection\",\n            options: cities,\n            sx: {\n              width: 300\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              label: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Create Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CalendarNotificationForm, \"ZmaBP/DtJx8MCfphDh6GH9GUCGU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = CalendarNotificationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarNotificationForm\");","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx"],"names":["React","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextField","AdapterDateFns","LocalizationProvider","CountryDropdown","RegionDropdown","CountryRegionData","Country","State","City","DateTimePicker","Autocomplete","useSelector","useDispatch","changeModalState","changeCreationModalState","CalendarNotificationForm","open","state","notifications","notificationCreationModalState","country","selectCountry","useState","region","selectRegion","value","setValue","Date","cities","setCities","city","setCity","handleDateChange","newValue","handleCountryChange","val","x","getCitiesOfCountry","y","getAllCountries","dispatch","handleClickOpen","handleClose","display","flexDirection","gap","maxLength","params","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { Country, State, City }  from 'country-state-city';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeModalState, changeCreationModalState} from '../reducers/notificationSlice';\n\nexport default function CalendarNotificationForm() {\n    const open = useSelector((state) => state.notifications.notificationCreationModalState);\n    const [country, selectCountry] =  React.useState('');\n    const [region, selectRegion] =  React.useState('');\n    const [value, setValue] = React.useState(new Date());\n    const [cities, setCities] = React.useState('');\n    const [city, setCity] = React.useState('');\n\n    const handleDateChange = (newValue) => {\n        setValue(newValue);\n    };\n\n    const handleCountryChange = (val) => {\n        selectCountry(val);\n        let x = City.getCitiesOfCountry(val);\n        let y = Country.getAllCountries();\n        debugger;\n    };\n\n    const dispatch = useDispatch();\n\n    const handleClickOpen = () => {\n        dispatch(changeCreationModalState(\"\"));\n    };\n\n    const handleClose = () => {\n        dispatch(changeCreationModalState(\"\"));\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" onClick={handleClickOpen}>\n            Open form dialog\n            </Button>\n            <Dialog\n            open={open}\n            onClose={handleClose}>\n            <DialogTitle>{\"New reminder\"} </DialogTitle>\n            <DialogContent>\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\" }}>\n                    <TextField  inputProps={{ maxLength: 30 }}\n                    id=\"standard-basic\" label=\"Reminder\" variant=\"standard\" />\n\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <DateTimePicker\n                            label=\"Time\"\n                            value={value}\n                            onChange={handleDateChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                    </LocalizationProvider>\n                    <CountryDropdown\n                        value={country}\n                        onChange={handleCountryChange} />\n                    <Autocomplete\n                        disablePortal\n                        id=\"citySelection\"\n                        options={cities}\n                        sx={{ width: 300 }}\n                        renderInput={(params) => <TextField {...params} label=\"City\" />}\n                    />\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>Cancel</Button>\n                <Button onClick={handleClose}>Create Reminder</Button>\n            </DialogActions>\n            </Dialog>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}