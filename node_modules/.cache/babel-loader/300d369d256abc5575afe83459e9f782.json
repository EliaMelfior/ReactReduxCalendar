{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nlet date = new Date();\nlet monthDay = date.getDate(); //1 to 31\n\nlet weekDay = date.getDay(); //0 to 6  (Sunday to Saturday)\n\nlet month = date.getMonth(); //0 to 11 (January to December)\n\nlet year = date.getFullYear();\nconst monthName = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nlet calendarObject = generateCalendarObject(month, year);\n\nfunction generateCalendarObject(month, year) {\n  let calendarObject = [];\n  let firstDay = new Date(year, month, 1);\n  let firstMonthDay = firstDay.getDate();\n  let firstWeekDay = firstDay.getDay();\n  let initialDay = 1 - firstWeekDay;\n  let monthDay = firstMonthDay;\n  let weekDay = firstWeekDay;\n\n  while (calendarObject.length < 42) {\n    calendarObject.push({\n      monthDay: weekDay\n    });\n    initialDay++;\n    let calendarDay = new Date(year, month, initialDay);\n    let monthDay = calendarDay.getDate();\n    let weekDay = calendarDay.getDay();\n  }\n\n  return calendarObject;\n}\n\nexport const dateSlice = createSlice({\n  name: 'date',\n  initialState: {\n    dateObject: date,\n    month: month,\n    year: year,\n    monthName: monthName[month],\n    calendarArray: calendarObject\n  },\n  reducers: {\n    incrementMonth: state => {\n      if (state.month < 11) {\n        state.month += 1;\n      } else {\n        state.year += 1;\n        state.month = 0;\n      }\n\n      state.monthName = monthName[state.month];\n    },\n    decrementMonth: state => {\n      if (state.month > 0) {\n        state.month -= 1;\n      } else {\n        state.year -= 1;\n        state.month = 11;\n      }\n\n      state.monthName = monthName[state.month];\n    },\n    generateDays: (month, day) => {}\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  incrementMonth,\n  decrementMonth\n} = dateSlice.actions;\nexport default dateSlice.reducer;","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/reducers/dateSlice.js"],"names":["createSlice","date","Date","monthDay","getDate","weekDay","getDay","month","getMonth","year","getFullYear","monthName","calendarObject","generateCalendarObject","firstDay","firstMonthDay","firstWeekDay","initialDay","length","push","calendarDay","dateSlice","name","initialState","dateObject","calendarArray","reducers","incrementMonth","state","decrementMonth","generateDays","day","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nlet date = new Date();\nlet monthDay = date.getDate();//1 to 31\nlet weekDay = date.getDay();//0 to 6  (Sunday to Saturday)\nlet month = date.getMonth();//0 to 11 (January to December)\nlet year = date.getFullYear();\nconst monthName = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\nlet calendarObject = generateCalendarObject(month, year);\n\nfunction generateCalendarObject(month, year) {\n    let calendarObject = [];\n    let firstDay = new Date(year, month, 1);\n    let firstMonthDay = firstDay.getDate();\n    let firstWeekDay = firstDay.getDay();\n\n    let initialDay = 1 - firstWeekDay;\n    let monthDay = firstMonthDay;\n    let weekDay = firstWeekDay;\n\n    while (calendarObject.length < 42) {\n\n        calendarObject.push({monthDay: weekDay});\n\n        initialDay++;\n        let calendarDay = new Date(year, month, initialDay);\n        let monthDay = calendarDay.getDate();\n        let weekDay = calendarDay.getDay();\n    }\n\n    return calendarObject;\n}\n\nexport const dateSlice = createSlice({\n    name: 'date',\n    initialState: {\n        dateObject: date,\n        month: month,\n        year: year,\n        monthName: monthName[month],\n        calendarArray: calendarObject\n    },\n    reducers: {\n      incrementMonth: (state) => {\n        if (state.month < 11) {\n            state.month += 1;\n        } else {\n            state.year +=1;\n            state.month = 0;\n        }\n\n        state.monthName = monthName[state.month];\n      },\n      decrementMonth: (state) => {\n        if (state.month > 0) {\n            state.month -= 1;\n        } else {\n            state.year -=1;\n            state.month = 11;\n        }\n\n        state.monthName = monthName[state.month];\n      },\n\n      generateDays: (month, day) => {\n\n      }\n    }\n  });\n\n// Action creators are generated for each case reducer function\nexport const { incrementMonth, decrementMonth } = dateSlice.actions\n\nexport default dateSlice.reducer"]},"metadata":{},"sourceType":"module"}