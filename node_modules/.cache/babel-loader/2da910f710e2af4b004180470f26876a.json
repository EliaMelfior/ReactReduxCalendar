{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nlet date = new Date();\n\nfunction generateCalendarObject(month, year) {\n  let calendarObject = [];\n  let firstDay = new Date(year, month, 1);\n  let firstMonthDay = firstDay.getDate();\n  let firstWeekDay = firstDay.getDay();\n  let initialDay = 1 - firstWeekDay;\n  let monthDay = firstMonthDay;\n  let weekDay = firstWeekDay;\n\n  while (calendarObject.length < 42) {\n    let calendarDay = new Date(year, month, initialDay);\n    let objectMonth = calendarDay.getMonth();\n    monthDay = calendarDay.getDate();\n    weekDay = calendarDay.getDay();\n    calendarObject.push({\n      'weekDay': weekDay,\n      'monthDay': monthDay,\n      'currentMonth': month == objectMonth\n    });\n    initialDay++;\n  }\n\n  return calendarObject;\n}\n\nexport const dateSlice = createSlice({\n  name: 'date',\n  initialState: {\n    dateObject: date,\n    month: month,\n    year: year,\n    monthName: monthName[month],\n    calendarObject: calendarObject\n  },\n  reducers: {\n    incrementMonth: state => {\n      if (state.month < 11) {\n        state.month += 1;\n      } else {\n        state.year += 1;\n        state.month = 0;\n      }\n\n      state.calendarObject = generateCalendarObject(state.month, state.year);\n      state.monthName = monthName[state.month];\n    },\n    decrementMonth: state => {\n      if (state.month > 0) {\n        state.month -= 1;\n      } else {\n        state.year -= 1;\n        state.month = 11;\n      }\n\n      state.calendarObject = generateCalendarObject(state.month, state.year);\n      state.monthName = monthName[state.month];\n    }\n  }\n});\nexport const {\n  incrementMonth,\n  decrementMonth\n} = dateSlice.actions;\nexport default dateSlice.reducer;","map":{"version":3,"sources":["/home/elia/projects/ReactChallenge/src/reducers/notificationSlice.js"],"names":["createSlice","date","Date","generateCalendarObject","month","year","calendarObject","firstDay","firstMonthDay","getDate","firstWeekDay","getDay","initialDay","monthDay","weekDay","length","calendarDay","objectMonth","getMonth","push","dateSlice","name","initialState","dateObject","monthName","reducers","incrementMonth","state","decrementMonth","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;;AAEA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AACzC,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,QAAQ,GAAG,IAAIL,IAAJ,CAASG,IAAT,EAAeD,KAAf,EAAsB,CAAtB,CAAf;AACA,MAAII,aAAa,GAAGD,QAAQ,CAACE,OAAT,EAApB;AACA,MAAIC,YAAY,GAAGH,QAAQ,CAACI,MAAT,EAAnB;AAEA,MAAIC,UAAU,GAAG,IAAIF,YAArB;AACA,MAAIG,QAAQ,GAAGL,aAAf;AACA,MAAIM,OAAO,GAAGJ,YAAd;;AAEA,SAAOJ,cAAc,CAACS,MAAf,GAAwB,EAA/B,EAAmC;AAE/B,QAAIC,WAAW,GAAG,IAAId,IAAJ,CAASG,IAAT,EAAeD,KAAf,EAAsBQ,UAAtB,CAAlB;AACA,QAAIK,WAAW,GAAGD,WAAW,CAACE,QAAZ,EAAlB;AACAL,IAAAA,QAAQ,GAAGG,WAAW,CAACP,OAAZ,EAAX;AACAK,IAAAA,OAAO,GAAGE,WAAW,CAACL,MAAZ,EAAV;AAEAL,IAAAA,cAAc,CAACa,IAAf,CAAoB;AAAC,iBAAWL,OAAZ;AAAqB,kBAAYD,QAAjC;AAA2C,sBAAgBT,KAAK,IAAIa;AAApE,KAApB;AACAL,IAAAA,UAAU;AACb;;AAED,SAAON,cAAP;AACH;;AAED,OAAO,MAAMc,SAAS,GAAGpB,WAAW,CAAC;AACjCqB,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAEtB,IADF;AAEVG,IAAAA,KAAK,EAAEA,KAFG;AAGVC,IAAAA,IAAI,EAAEA,IAHI;AAIVmB,IAAAA,SAAS,EAAEA,SAAS,CAACpB,KAAD,CAJV;AAKVE,IAAAA,cAAc,EAAEA;AALN,GAFmB;AASjCmB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,EAAGC,KAAD,IAAW;AAC3B,UAAIA,KAAK,CAACvB,KAAN,GAAc,EAAlB,EAAsB;AAClBuB,QAAAA,KAAK,CAACvB,KAAN,IAAe,CAAf;AACH,OAFD,MAEO;AACHuB,QAAAA,KAAK,CAACtB,IAAN,IAAa,CAAb;AACAsB,QAAAA,KAAK,CAACvB,KAAN,GAAc,CAAd;AACH;;AAEDuB,MAAAA,KAAK,CAACrB,cAAN,GAAuBH,sBAAsB,CAACwB,KAAK,CAACvB,KAAP,EAAcuB,KAAK,CAACtB,IAApB,CAA7C;AACAsB,MAAAA,KAAK,CAACH,SAAN,GAAkBA,SAAS,CAACG,KAAK,CAACvB,KAAP,CAA3B;AACC,KAXK;AAYNwB,IAAAA,cAAc,EAAGD,KAAD,IAAW;AAC3B,UAAIA,KAAK,CAACvB,KAAN,GAAc,CAAlB,EAAqB;AACjBuB,QAAAA,KAAK,CAACvB,KAAN,IAAe,CAAf;AACH,OAFD,MAEO;AACHuB,QAAAA,KAAK,CAACtB,IAAN,IAAa,CAAb;AACAsB,QAAAA,KAAK,CAACvB,KAAN,GAAc,EAAd;AACH;;AAEDuB,MAAAA,KAAK,CAACrB,cAAN,GAAuBH,sBAAsB,CAACwB,KAAK,CAACvB,KAAP,EAAcuB,KAAK,CAACtB,IAApB,CAA7C;AACAsB,MAAAA,KAAK,CAACH,SAAN,GAAkBA,SAAS,CAACG,KAAK,CAACvB,KAAP,CAA3B;AACC;AAtBK;AATuB,CAAD,CAA7B;AAmCP,OAAO,MAAM;AAAEsB,EAAAA,cAAF;AAAkBE,EAAAA;AAAlB,IAAqCR,SAAS,CAACS,OAArD;AAEP,eAAeT,SAAS,CAACU,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nlet date = new Date();\n\nfunction generateCalendarObject(month, year) {\n    let calendarObject = [];\n    let firstDay = new Date(year, month, 1);\n    let firstMonthDay = firstDay.getDate();\n    let firstWeekDay = firstDay.getDay();\n\n    let initialDay = 1 - firstWeekDay;\n    let monthDay = firstMonthDay;\n    let weekDay = firstWeekDay;\n\n    while (calendarObject.length < 42) {\n\n        let calendarDay = new Date(year, month, initialDay);\n        let objectMonth = calendarDay.getMonth();\n        monthDay = calendarDay.getDate();\n        weekDay = calendarDay.getDay();\n\n        calendarObject.push({'weekDay': weekDay, 'monthDay': monthDay, 'currentMonth': month == objectMonth});\n        initialDay++;\n    }\n\n    return calendarObject;\n}\n\nexport const dateSlice = createSlice({\n    name: 'date',\n    initialState: {\n        dateObject: date,\n        month: month,\n        year: year,\n        monthName: monthName[month],\n        calendarObject: calendarObject\n    },\n    reducers: {\n        incrementMonth: (state) => {\n        if (state.month < 11) {\n            state.month += 1;\n        } else {\n            state.year +=1;\n            state.month = 0;\n        }\n\n        state.calendarObject = generateCalendarObject(state.month, state.year);\n        state.monthName = monthName[state.month];\n        },\n        decrementMonth: (state) => {\n        if (state.month > 0) {\n            state.month -= 1;\n        } else {\n            state.year -=1;\n            state.month = 11;\n        }\n\n        state.calendarObject = generateCalendarObject(state.month, state.year);\n        state.monthName = monthName[state.month];\n        }\n    }\n});\n\nexport const { incrementMonth, decrementMonth } = dateSlice.actions\n\nexport default dateSlice.reducer"]},"metadata":{},"sourceType":"module"}