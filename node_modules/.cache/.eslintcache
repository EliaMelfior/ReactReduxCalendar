[{"/home/elia/projects/ReactChallenge/src/index.js":"1","/home/elia/projects/ReactChallenge/src/Main.js":"2","/home/elia/projects/ReactChallenge/src/reportWebVitals.js":"3","/home/elia/projects/ReactChallenge/src/routes/index.js":"4","/home/elia/projects/ReactChallenge/src/pages/Calendar.js":"5","/home/elia/projects/ReactChallenge/src/store/store.js":"6","/home/elia/projects/ReactChallenge/src/reducers/dateSlice.js":"7","/home/elia/projects/ReactChallenge/src/components/CalendarMenu.jsx":"8","/home/elia/projects/ReactChallenge/src/components/CalendarMonth.jsx":"9","/home/elia/projects/ReactChallenge/src/reducers/notificationSlice.js":"10","/home/elia/projects/ReactChallenge/src/components/CalendarNotifications.jsx":"11","/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx":"12"},{"size":1010,"mtime":1650252454884,"results":"13","hashOfConfig":"14"},{"size":290,"mtime":1650319421538,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1649959421366,"results":"16","hashOfConfig":"14"},{"size":224,"mtime":1650252454884,"results":"17","hashOfConfig":"14"},{"size":484,"mtime":1650317774374,"results":"18","hashOfConfig":"14"},{"size":714,"mtime":1650319418146,"results":"19","hashOfConfig":"14"},{"size":2204,"mtime":1650309064681,"results":"20","hashOfConfig":"14"},{"size":2150,"mtime":1650300331006,"results":"21","hashOfConfig":"14"},{"size":6279,"mtime":1650252454884,"results":"22","hashOfConfig":"14"},{"size":5248,"mtime":1650325803212,"results":"23","hashOfConfig":"14"},{"size":3369,"mtime":1650315755020,"results":"24","hashOfConfig":"14"},{"size":5357,"mtime":1650326897786,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4aueu",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/elia/projects/ReactChallenge/src/index.js",[],["53","54"],"/home/elia/projects/ReactChallenge/src/Main.js",[],"/home/elia/projects/ReactChallenge/src/reportWebVitals.js",[],"/home/elia/projects/ReactChallenge/src/routes/index.js",[],"/home/elia/projects/ReactChallenge/src/pages/Calendar.js",[],"/home/elia/projects/ReactChallenge/src/store/store.js",[],"/home/elia/projects/ReactChallenge/src/reducers/dateSlice.js",["55","56","57"],"import { createSlice } from '@reduxjs/toolkit';\n\nlet date = new Date();\nlet monthDay = date.getDate();//1 to 31\nlet weekDay = date.getDay();//0 to 6  (Sunday to Saturday)\nlet month = date.getMonth();//0 to 11 (January to December)\nlet year = date.getFullYear();\nconst monthName = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\nlet calendarObject = generateCalendarObject(month, year);\n\nfunction generateCalendarObject(month, year) {\n    let calendarObject = [];\n    let firstDay = new Date(year, month, 1);\n    let firstMonthDay = firstDay.getDate();\n    let firstWeekDay = firstDay.getDay();\n\n    let initialDay = 1 - firstWeekDay;\n    let monthDay = firstMonthDay;\n    let weekDay = firstWeekDay;\n\n    while (calendarObject.length < 42) {\n\n        let calendarDay = new Date(year, month, initialDay);\n        let objectMonth = calendarDay.getMonth();\n        monthDay = calendarDay.getDate();\n        weekDay = calendarDay.getDay();\n\n        calendarObject.push({'dateObject': calendarDay, 'weekDay': weekDay, 'monthDay': monthDay, 'currentMonth': month == objectMonth});\n        initialDay++;\n    }\n\n    return calendarObject;\n}\n\nexport const dateSlice = createSlice({\n    name: 'date',\n    initialState: {\n        dateObject: date,\n        month: month,\n        year: year,\n        monthName: monthName[month],\n        calendarObject: calendarObject\n    },\n    reducers: {\n        incrementMonth: (state) => {\n        if (state.month < 11) {\n            state.month += 1;\n        } else {\n            state.year +=1;\n            state.month = 0;\n        }\n\n        state.calendarObject = generateCalendarObject(state.month, state.year);\n        state.monthName = monthName[state.month];\n        },\n        decrementMonth: (state) => {\n        if (state.month > 0) {\n            state.month -= 1;\n        } else {\n            state.year -=1;\n            state.month = 11;\n        }\n\n        state.calendarObject = generateCalendarObject(state.month, state.year);\n        state.monthName = monthName[state.month];\n        }\n    }\n});\n\nexport const { incrementMonth, decrementMonth } = dateSlice.actions\n\nexport default dateSlice.reducer","/home/elia/projects/ReactChallenge/src/components/CalendarMenu.jsx",[],"/home/elia/projects/ReactChallenge/src/components/CalendarMonth.jsx",["58","59","60","61","62","63","64","65","66"],"import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeModalState } from '../reducers/notificationSlice';\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    fontWeight: '800',\n    transition: '0.5s',\n    height: 'calc((100vh - 144px)/7)',\n    '&:hover':{\n        cursor: 'pointer',\n        backgroundColor:'rgba(32, 51, 158, 0.2) !important'\n    }\n}));\n\nconst DayItem = styled(Paper)(({ theme }) => ({\n    backgroundColor: 'rgb(25, 118, 210)',\n    fontWeight: '600',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    transition: '0.5s',\n    height: '1',\n    color: 'white'\n}));\n\nfunction FormRow(props) {\n    const dispatch = useDispatch();\n\n    let weekDays = props.weekDays;\n    let className = '';\n\n    if (props.weekDayName == 'Sunday' || props.weekDayName == 'Saturday') {\n        className = 'weekendDays';\n    }\n\n    return (\n      <React.Fragment>\n        <Grid item xs={0.8}>\n          <DayItem elevation={6}>{props.weekDayName}</DayItem>\n        </Grid>\n        <Grid item xs={1.7}>\n          <Item\n                onClick={() => {\n                    dispatch(changeModalState(weekDays[0]));\n                }}\n                className={weekDays[0].currentMonth ? className : className + ' differentMonth'}\n                elevation={6}>{weekDays[0].monthDay}</Item>\n        </Grid>\n        <Grid item xs={1.7}>\n          <Item\n                onClick={() => {\n                    dispatch(changeModalState(weekDays[1]));\n                }}\n                className={weekDays[1].currentMonth ? className : className + ' differentMonth'}\n                elevation={6}>{weekDays[1].monthDay}</Item>\n        </Grid>\n        <Grid item xs={1.7}>\n          <Item\n                onClick={() => {\n                    dispatch(changeModalState(weekDays[2]));\n                }}\n                className={weekDays[2].currentMonth ? className : className + ' differentMonth'}\n                elevation={6}>{weekDays[2].monthDay}</Item>\n        </Grid>\n        <Grid item xs={1.7}>\n          <Item\n                onClick={() => {\n                    dispatch(changeModalState(weekDays[3]));\n                }}\n                className={weekDays[3].currentMonth ? className : className + ' differentMonth'}\n                elevation={6}>{weekDays[3].monthDay}</Item>\n        </Grid>\n        <Grid item xs={1.7}>\n          <Item\n                onClick={() => {\n                    dispatch(changeModalState(weekDays[4]));\n                }}\n                className={weekDays[4].currentMonth ? className : className + ' differentMonth'}\n                elevation={6}>{weekDays[4].monthDay}</Item>\n        </Grid>\n        <Grid item xs={1.7}>\n          <Item\n                onClick={() => {\n                    dispatch(changeModalState(weekDays[5]));\n                }}\n                className={weekDays[5].currentMonth ? className : className + ' differentMonth'}\n                elevation={6}>{weekDays[5].monthDay}</Item>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\nfunction CalendarMonth(props) {\n    const calendarObject = useSelector((state) => state.date.calendarObject);\n\n    let sundays = calendarObject.filter((item) => { return item.weekDay == 0; });\n    let mondays = calendarObject.filter((item) => { return item.weekDay == 1; });\n    let tuesdays = calendarObject.filter((item) => { return item.weekDay == 2; });\n    let wednesdays = calendarObject.filter((item) => { return item.weekDay == 3; });\n    let thursdays = calendarObject.filter((item) => { return item.weekDay == 4; });\n    let fridays = calendarObject.filter((item) => { return item.weekDay == 5; });\n    let saturdays = calendarObject.filter((item) => { return item.weekDay == 6; });\n\n\n    return (\n        <Box sx={{\n            width: '100%',\n            height: '100%',\n            margin: '14px 0px 0px 0px'\n            }}>\n        <Grid\n            container\n            spacing={0.5}\n            direction=\"row\"\n            sx={{ margin: '0px' }}>\n            <Grid\n                container\n                xs={1.7}\n                direction=\"column\"\n                item spacing={0.5}>\n                <FormRow\n                    weekDayName=\"Sunday\"\n                    weekDays={sundays}/>\n            </Grid>\n            <Grid\n                container\n                xs={1.7}\n                direction=\"column\"\n                item spacing={0.5}>\n                <FormRow\n                    weekDayName=\"Monday\"\n                    weekDays={mondays}/>\n            </Grid>\n            <Grid\n                container\n                xs={1.7}\n                direction=\"column\"\n                item spacing={0.5}>\n                <FormRow\n                    weekDayName=\"Tuesday\"\n                    weekDays={tuesdays}/>\n            </Grid>\n            <Grid\n                container\n                xs={1.7}\n                direction=\"column\"\n                item spacing={0.5}>\n                <FormRow\n                    weekDayName=\"Wednesday\"\n                    weekDays={wednesdays}/>\n            </Grid>\n            <Grid\n                container\n                xs={1.7}\n                direction=\"column\"\n                item spacing={0.5}>\n                <FormRow\n                    weekDayName=\"Thursday\"\n                    weekDays={thursdays}/>\n            </Grid>\n            <Grid\n                container\n                xs={1.7}\n                direction=\"column\"\n                item spacing={0.5}>\n                <FormRow\n                    weekDayName=\"Friday\"\n                    weekDays={fridays}/>\n            </Grid>\n            <Grid\n                container\n                xs={1.7}\n                direction=\"column\"\n                item spacing={0.5}>\n                <FormRow\n                    weekDayName=\"Saturday\"\n                    weekDays={saturdays}/>\n            </Grid>\n        </Grid>\n    </Box>\n  )\n}\n\nexport default CalendarMonth;","/home/elia/projects/ReactChallenge/src/reducers/notificationSlice.js",["67","68","69","70","71","72"],"/home/elia/projects/ReactChallenge/src/components/CalendarNotifications.jsx",[],"/home/elia/projects/ReactChallenge/src/components/CalendarNotificationForm.jsx",["73","74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":4,"column":5,"nodeType":"81","messageId":"82","endLine":4,"endColumn":13},{"ruleId":"79","severity":1,"message":"83","line":5,"column":5,"nodeType":"81","messageId":"82","endLine":5,"endColumn":12},{"ruleId":"84","severity":1,"message":"85","line":28,"column":121,"nodeType":"86","messageId":"87","endLine":28,"endColumn":123},{"ruleId":"84","severity":1,"message":"85","line":39,"column":27,"nodeType":"86","messageId":"87","endLine":39,"endColumn":29},{"ruleId":"84","severity":1,"message":"85","line":39,"column":60,"nodeType":"86","messageId":"87","endLine":39,"endColumn":62},{"ruleId":"84","severity":1,"message":"85","line":103,"column":73,"nodeType":"86","messageId":"87","endLine":103,"endColumn":75},{"ruleId":"84","severity":1,"message":"85","line":104,"column":73,"nodeType":"86","messageId":"87","endLine":104,"endColumn":75},{"ruleId":"84","severity":1,"message":"85","line":105,"column":74,"nodeType":"86","messageId":"87","endLine":105,"endColumn":76},{"ruleId":"84","severity":1,"message":"85","line":106,"column":76,"nodeType":"86","messageId":"87","endLine":106,"endColumn":78},{"ruleId":"84","severity":1,"message":"85","line":107,"column":75,"nodeType":"86","messageId":"87","endLine":107,"endColumn":77},{"ruleId":"84","severity":1,"message":"85","line":108,"column":73,"nodeType":"86","messageId":"87","endLine":108,"endColumn":75},{"ruleId":"84","severity":1,"message":"85","line":109,"column":75,"nodeType":"86","messageId":"87","endLine":109,"endColumn":77},{"ruleId":"84","severity":1,"message":"88","line":34,"column":42,"nodeType":"86","messageId":"87","endLine":34,"endColumn":44},{"ruleId":"84","severity":1,"message":"88","line":35,"column":49,"nodeType":"86","messageId":"87","endLine":35,"endColumn":51},{"ruleId":"84","severity":1,"message":"88","line":44,"column":42,"nodeType":"86","messageId":"87","endLine":44,"endColumn":44},{"ruleId":"84","severity":1,"message":"88","line":45,"column":49,"nodeType":"86","messageId":"87","endLine":45,"endColumn":51},{"ruleId":"84","severity":1,"message":"88","line":91,"column":41,"nodeType":"86","messageId":"87","endLine":91,"endColumn":43},{"ruleId":"84","severity":1,"message":"88","line":95,"column":41,"nodeType":"86","messageId":"87","endLine":95,"endColumn":43},{"ruleId":"84","severity":1,"message":"85","line":39,"column":33,"nodeType":"86","messageId":"87","endLine":39,"endColumn":35},{"ruleId":"84","severity":1,"message":"88","line":79,"column":35,"nodeType":"86","messageId":"87","endLine":79,"endColumn":37},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'monthDay' is assigned a value but never used.","Identifier","unusedVar","'weekDay' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]